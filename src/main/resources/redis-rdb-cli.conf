#
# This parameter used in `rmt` command.
# `rmt -s ./dump.rdb -m redis://127.0.0.1:6380`
# Above command using redis's `pipeline` to batch send 4096 commands to target redis
#
# If set `migrate_batch_size=1` means send every 1 command and then synchronize wait the sending result.
#
migrate_batch_size=4096

#
# This parameter used in `rmt` command.
# `rmt -s ./dump.rdb -m redis://127.0.0.1:6380`
# Above command will open  `migrate_threads`'s socket to async migrate data to target redis.
#
# This parameter MUST be power of 2, if `migrate_threads` <= 0 means sync(instead of async) migrate data to target redis.
#
migrate_threads=4

#
# This parameter used in `rmt` command.
# `rmt -s ./dump.rdb -m redis://127.0.0.1:6380`
#
# if `migrate_flush = yes` means sent every 1 command then invoke `SocketOutputStream.flush()`
# if `migrate_flush = no` means sent every 64KB data then invoke `SocketOutputStream.flush()`
#
migrate_flush=yes

#
# This parameter used in `rmt` command.
# `rmt -s ./dump.rdb -m redis://127.0.0.1:6380`
# If failed to migrate data to target redis. the `rmt` command will retry `migrate_retries` times to migrate data to target redis.
#
migrate_retries=1

#
# This parameter only used in `rst` command. 
# `rst -s redis://127.0.0.1:6379 -m redis://127.0.0.1:6380`
# If sync data from `redis://127.0.0.1:6379` to `redis://127.0.0.1:6380`. following disabled commands will not sync to `redis://127.0.0.1:6380`
# If source is standalone redis and target is also standalone redis, `migrate_disable_commands` can set to empty.
# But if source is standalone redis and target is redis cluster, the following command should be disable. otherwise may delete all cluster's data.
#
migrate_disable_commands=flushall,flushdb,swapdb

#
# This parameter used in `rct -f resp` command.
# `rct -f resp -s ./dump.rdb -o ./appendonly.aof`
# Above command convert `set`, `list`, `hash` and `zset` type to aof command with 128 elements batch.
#
# If set `batch_size=1` means convert above types to aof command with only 1 elements.
#
batch_size=128

#
# This parameter used in `rct -f dump`, `rct -f diff`, `rmt`
# The generated dump aof use `dump_rdb_version` as RDB version
# `dump_rdb_version=-1` means use source RDB version.
#
# Redis-5.x : `dump_rdb_version=9`
# Redis-4.x : `dump_rdb_version=8`
# Redis-3.2 : `dump_rdb_version=7`
# Redis-3.0 : `dump_rdb_version=6`
# Redis-2.8 : `dump_rdb_version=6`
# Redis-2.6 : `dump_rdb_version=6`
#
dump_rdb_version=-1

#
# This parameter used in `rct` like the following
# `rct -f keyval -s ./dump.rdb -o ./keyval.csv`
# The file `keyval.csv` will be split by <delimiter>. by default the delimiter is `,`
#
delimiter=\u002C

#
# This parameter used in `rct` like the following
# `rct -f keyval -s ./dump.rdb -o ./keyval.csv`
# The file `keyval.csv` will be quoted by <quote>. by default the quote is `"`
#
quote=\u0022

#
# Socket parameter
# Used in connection timeout and read timeout
# This parameter MUST greater than redis server's `repl-ping-slave-period`
#
timeout=30000

#
# Socket parameter
# SO_SNDBUF
# More details please refer to https://www.psc.edu/index.php/networking/641-tcp-tune
#
# `snd_buf=0` means use system default value
#
snd_buf=0

#
# Socket parameter
# SO_RCVBUF
# More details please refer to https://www.psc.edu/index.php/networking/641-tcp-tune
#
# `rcv_buf=0` means use system default value
#
rcv_buf=0

#
# This parameter will buffered the sent data and the received data to speed up socket performance.
# By default the value is `8KB`
#
buffer_size=8192

#
# If source redis uri like the following
# rmt -s redis://host:port ...
# rct -s redis://host:port ...
# rdt -b redis://host:port ...
# The `heartbeat=1000` means every 1 second the `redis-rdb-cli`
# will send ping message to remote redis uri so that keep connection alive
#
heartbeat=1000

#
# If source redis uri like the following
# rmt -s redis://host:port ...
# rct -s redis://host:port ...
# rdt -b redis://host:port ...
# The `retries=5` means when disconnect with redis server.
# The `redis-rdb-cli` will retry to connect to remote redis uri to try `psync` process.
# No longer try to reconnect when 5 consecutive failures.
#
retries=5

#
# This parameter is used in conjunction with the `retry_time`
# Before try to reconnect. the `redis-rdb-cli` will sleep `retry_interval` and then to try reconnect to source redis.
# By default the value is 1 second.
#
retry_interval=1000

#
# If source redis uri like the following
# rmt -s redis://host:port ...
# rct -s redis://host:port ...
# rdt -b redis://host:port ...
#
# The `redis-rdb-cli` will use an async input stream to speed up socket performance. by default the value is `512KB`
#
async_cache_size=524288

#
# Metric parameter
#
# Metric data to exported. the valid value is `none` and `influxdb`
# By default the value is `none` that will totally not report metric.
# If the value is `prometheus`. the `metric_uri` take effect. that will push the metric data to `influxdb`.
#
metric_gateway=none

#
# Metric parameter
#
# Push the metric data to `influxdb` pushgateway.
# This parameter only take effect when `metric_gateway=influxdb`
#
metric_uri=http://localhost:8086

#
# Metric parameter
# Set influxdb access username
# Push the metric data to `influxdb` pushgateway.
# This parameter only take effect when `metric_gateway=influxdb`
#
metric_user=redis_rdb_cli

#
# Metric parameter
# Set influxdb access password
# Push the metric data to `influxdb` pushgateway.
# This parameter only take effect when `metric_gateway=influxdb`
#
metric_pass=redis_rdb_cli

#
# Metric parameter
# Set influxdb database
# Push the metric data to `influxdb` pushgateway.
# This parameter only take effect when `metric_gateway=influxdb`
#
metric_database=redis_rdb_cli

#
# Metric parameter
# Set influxdb retention policy
# Push the metric data to `influxdb` pushgateway.
# This parameter only take effect when `metric_gateway=influxdb`
#
metric_retention_policy=30days

#
# Metric parameter
#
# Basically you should **NOT** to change this parameter. If changed, you may not see the dashboard because the showing data
# filtered by label `job`. But when you want to deploy multi `redis-rdb-cli` instance, you can change this parameter
# different between instances. and also replace `redis_rdb_cli_memory` in `endpoint.json`, `memory.json` and `dests.json` to new value.
# Then the new dashboard will import to grafana by instance.
#
metric_instance=redis_rdb_cli
